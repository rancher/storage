#!/bin/bash
set -x

if [ -e "$(dirname $0)/common.sh" ]; then
    source $(dirname $0)/common.sh
elif [ -e "$(dirname $0)/../common/common.sh" ]; then
    source $(dirname $0)/../common/common.sh
fi

init()
{
    if [ -e /dev/loop-control ]; then
        modprobe loop
    fi
    print_success
}

validate()
{
    print_success
}

create()
{
    # The OPTS variable will be populated from the input JSON as a map of key/values
    if [ -z "${OPTS[size]}" ]; then
        print_error "size is required"
    fi
    UUID=$(</proc/sys/kernel/random/uuid)
    dd if=/dev/zero of=${UUID}.img bs=1MB count=${OPTS[size]}
    print_options volumeID ${UUID}
}

delete()
{
    # The OPTS variable will be populated from the input JSON as a map of key/values
    rm -f ${OPTS[volumeID]}.img
    print_success
}

get_attached_dev()
{
    local image=$1
    local dev=`losetup -a|grep ${image}|cut -d ":" -f 1|head -n 1`

    if [ -z "${dev}" ]
    then
            return 1
    fi
    echo "$dev"
    return 0
}

attach()
{
    # The OPTS variable will be populated from the input JSON as a map of key/values
    IMG=${OPTS[volumeID]}.img
    if [ ! -e "${IMG}" ]; then
        print_error "Failed to find ${IMG}"
    fi

    DEVICE=$(get_attached_dev ${IMG})
    if [ $? -ne 0 ]
    then
        DEVICE=$(losetup --show -f ${IMG})
    fi

    print_device $DEVICE
}

detach()
{
    # ${DEVICE} will be set with the device that should be detached
    losetup -d ${DEVICE}
    print_success
}

mountdest()
{
    # ${MNT_DEST} will be set with the directory where the filesystem should be mounted
    # ${DEVICE} will be the device returned from attach, if any
    # ${OPTS} will be populated with the options from the JSON input
    print_not_supported
}

unmount()
{
    # ${MNT_DEST} will be set with the directory from which the filesystem should be unmounted
    print_not_supported
}

# Every script must call main as such
main "$@"
