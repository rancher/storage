#!/bin/bash

if [ -e "$(dirname $0)/common.sh" ]; then
    source $(dirname $0)/common.sh
elif [ -e "$(dirname $0)/../common/common.sh" ]; then
    source $(dirname $0)/../common/common.sh
fi

mount_nfs() {
    local host=$1
    local exportDir=$2
    local mountDir=$3
    local opts=$4
    local error

    if [ "$(ismounted $mountDir)" == 0 ]; then
        mkdir -p $mountDir

        local cmd="mount"
        if [ ! -z "$opts" ]; then
            cmd="$cmd -o $opts"
        fi
        cmd="$cmd $host:$exportDir $mountDir"

        error=`$cmd 2>&1`
        if [ $? -ne 0 ]; then
            print_error "Failed $cmd"
        fi
    fi
}

unmount_nfs() {
    local mountDir="$1"

    if [ $(ismounted "$mountDir") == 1 ] ; then
        error=`umount "$mountDir" 2>&1`
        if [ $? -ne 0 ]; then
            print_error "Failed umount $mountDir: $error"
        fi
    fi

    if [ ! "$(ls -A $mountDir)" ]; then
        rm -rf "$mountDir"
    fi
}

init() {
    rpcbind -f &>/dev/null &
    print_success
}

tmp_dir() {
    echo "/tmp/$(cat /dev/urandom | tr -dc 'a-z0-9' | fold -w5 | head -n1)"
}

################################################################################
# These functions are called by the volume plugin framework (or Rancher)
################################################################################

create() {
    if [ -z "${OPTS[name]}" ]; then
        print_error "name is required"
    fi

    # default configuration
    local host="$NFS_SERVER"
    local exportDir="$MOUNT_DIR"
    local opts="$MOUNT_OPTS"
    local name="${OPTS[name]}"
    local mountDir="$(tmp_dir)"
    local onRemove="$ON_REMOVE"

    # if host/export are set, do nothing
    if [ ! -z "${OPTS[host]}" ] && [ ! -z "${OPTS[export]}" ]; then
        print_success
        exit 0
    # if host/exportBase are set, switch to driver_opts
    elif [ ! -z "${OPTS[host]}" ] && [ ! -z "${OPTS[exportBase]}" ]; then
        host="${OPTS[host]}"
        exportDir="${OPTS[exportBase]}"
        opts="${OPTS[mntOptions]}"
    fi

    if [ ! -z "${OPTS[onRemove]}" ]; then
        onRemove="${OPTS[onRemove]}"
    fi

    # create sub-directory using name parameter to represent volume
    mount_nfs "$host" "$exportDir" "$mountDir" "$opts"
    local subDir="$mountDir/$name"
    local created=0
    if [ ! -d "${subDir}" ]; then
        mkdir -p "${subDir}"
        created=1
    fi
    unmount_nfs "${mountDir}"

    if [ "${created}" == 1 ]; then
        print_options created true name ${OPTS[name]} onRemove $onRemove
    else
        print_success
    fi
}

attach() {
    print_not_supported
}

mountdest() {
    # default configuration
    local host="$NFS_SERVER"
    local exportDir="$MOUNT_DIR/${OPTS[name]}"
    local opts="$MOUNT_OPTS"
    local name="${OPTS[name]}"
    local mountDir="$MNT_DEST"

    # if host/export are set, mount root export
    if [ ! -z "${OPTS[host]}" ] && [ ! -z "${OPTS[export]}" ]; then
        host="${OPTS[host]}"
        exportDir="${OPTS[export]}"
        opts="${OPTS[mntOptions]}"
    # if host/exportBase are set, mount subfolder
    elif [ ! -z "${OPTS[host]}" ] && [ ! -z "${OPTS[exportBase]}" ]; then
        host="${OPTS[host]}"
        exportDir="${OPTS[exportBase]}/$name"
        opts="${OPTS[mntOptions]}"
    fi

    mount_nfs "$host" "$exportDir" "$mountDir" "$opts"
    print_success
}

detach() {
    print_not_supported
}

unmount() {
    unmount_nfs "$MNT_DEST"
    print_success
}

delete() {
    # default configuration
    local host="$NFS_SERVER"
    local exportDir="$MOUNT_DIR"
    local opts="$MOUNT_OPTS"
    local name="${OPTS[name]}"
    local mountDir="$(tmp_dir)"
    local onRemove="$ON_REMOVE"

    if [ ! -z "${OPTS[onRemove]}" ]; then
        onRemove="${OPTS[onRemove]}"
    fi

    if [ "$onRemove" == "retain" ]; then
        print_success retained
        exit 0
    fi

    # if host/export or host/exportBase are set, switch to driver_opts
    if [ ! -z "${OPTS[host]}" ] && [ ! -z "${OPTS[export]}" ]; then
        host="${OPTS[host]}"
        exportDir="${OPTS[export]}"
        opts="${OPTS[mntOptions]}"
    elif [ ! -z "${OPTS[host]}" ] && [ ! -z "${OPTS[exportBase]}" ]; then
        host="${OPTS[host]}"
        exportDir="${OPTS[exportBase]}"
        opts="${OPTS[mntOptions]}"
    fi

    mount_nfs "$host" "$exportDir" "$mountDir" "$opts"
    if [ ! -z "${OPTS[host]}" ] && [ ! -z "${OPTS[export]}" ]; then
        log_info "Purging root $mountDir"
        rm -rf "$mountDir/*"
    else
        log_info "Purging subfolder $mountDir/$name"
        rm -rf "$mountDir/$name"
    fi
    unmount_nfs "${mountDir}"

    print_success purged
}

# Every script must call main as such
main "$@"
